// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**************************************************************************************************
 * Product Recommendations Sample
 * 
 * This sample shows how to use an API endpoint generated by the Recommendations preconfigured 
 * solution. You can find more details on the Recommendations preconfigured solution 
 * at https://aka.ms/recotemplate. (TODO: Needs to be updated to final location)
 *
 * The sample demonstrates how to:
 * 
 * 1. Train a product recommendations predictive models based on 
 *    historical transaction data and information on the product catalog.
 * 
 * 2. Get Item-to-Item Recommendations from a trained model.
 * 
 * 3. Get Personalized Recommendations from a trained model.
 * 
 * 4. Set a model to be the default model, and request recommendations from the default model.
 * 
 * PRE-REQUIREMENTS:
 * 
 *  (The steps below are explained in more detail at
 *    https://github.com/abhi1509/RecoPreview/blob/master/getting-started.md )
 * 
 *  1. Before you can run the application you need to deploy the Recommendations Template. 
 *     Deployment instructions are at 
 *     https://github.com/abhi1509/RecoPreview/blob/master/doc/deployment-instructions.md
 *
 *  2. You will get an API Key as part of the deployment process and the url of your solution. 
 *     Set the apiKey and recommendationsUri variable based on those values.
 *
 *  3. You will need to upload catalog and usage data for training to a blob storage container.
 *     It is important to note that you copy your usage and evaluation files to distinct FOLDERs, 
 *     while you provide the location of the catalog FILE.
 *     
 *     Based on that, you will need to set the following variables: 
 *     blobContainerName, string trainCatalogFileRelativeLocation,
 *     trainUsageFolderRelativeLocation and evaluationUsageFolderRelativeLocation 
 *  
 ************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Threading;
using Recommendations.Client;
using Recommendations.Client.Entities;
using Microsoft.WindowsAzure.Storage;
using System.IO;
using System.Reflection;

namespace Recommendations.Sample
{
   
    class Program
    {
        static void Main(string[] args)
        {
            // Modify the lines below based on the values you received when the site was configured.
            // Note that the connection string is only needed by the sample because it uploads some sample
            // data to create a recommendation model.
            string recommendationsEndPointUri = "https://yoursite.azurewebsites.net";  
            string apiAdminKey = "your Admin key goes here";                           
            string connectionString = @"DefaultEndpointsProtocol=https;AccountName=yoursite;AccountKey=theAccountKeyProvidedToYouAtConfigurationTime";

            // Blob storage locations. You may modify these locations to point to your real data.
            string blobContainerName = "sample-data";  
            string catalogFileRelativeLocation = "demoCatalog.csv";
            string usageFolderRelativeLocation = "usageFiles";
            string evaluationUsageFolderRelativeLocation = null;


            // Copy some sample data for training to the blob storage location.
            // If you are using your own data, and the data is already uploaded to blob storage, 
            // this step may not be necessary.
            Console.WriteLine("Copying sample training data to blob storage...");
            CopySampleFilesToBlobStorage(connectionString, blobContainerName, catalogFileRelativeLocation, usageFolderRelativeLocation);

            // Create an instance that allows us to work with the models.
            // Note that you can "train" recommendation models only with the modeling key,
            // You can score models with either the modeling key or the scoring key.
            var webApp = new RecommendationsAPI(new Uri(recommendationsEndPointUri));

            // Add the api key header to all requests
            webApp.HttpClient.DefaultRequestHeaders.Add("x-api-key", apiAdminKey);

            // Create a models class.
            var models = new Models(webApp);

            // Set to a specific model Id if you would like to skip the training phase.
            Guid? modelId = null; 

            if (!modelId.HasValue)
            {
                // Let's train the model.

                // Set the training parameters
                var modelParameters = new ModelParameters(
                    description: "Sample created model",
                    blobContainerName: blobContainerName,
                    catalogFileRelativeLocation: catalogFileRelativeLocation,
                    usageFolderRelativeLocation: usageFolderRelativeLocation,
                    evaluationUsageFolderRelativeLocation: evaluationUsageFolderRelativeLocation,
                    supportThreshold: 3,
                    cooccurrenceUnit: CooccurrenceUnit.User,
                    similarityFunction: SimilarityFunction.Jaccard,
                    enableColdItemPlacement: false,
                    enableColdToColdRecommendations: false,
                    enableUserAffinity: true,
                    allowSeedItemsInRecommendations: true,
                    enableBackfilling: true,
                    decayPeriodInDays: 30);

                Console.WriteLine("Training a new model.");
                Model model = (models.CreateModel(modelParameters)) as Model;

                Console.WriteLine("Waiting for model " + model.Id + "to complete training. ");
                modelId = model.Id;

                do
                {
                    Thread.Sleep(5000);
                    model = models.GetModel(modelId.Value);

                    Console.WriteLine("Model " + model.Id + " status: " + model.ModelStatus + ":" + model.ModelStatusMessage);
                }
                while (model.ModelStatus != ModelStatus.Completed &&
                       model.ModelStatus != ModelStatus.Failed);

                Console.WriteLine("Model " + model.Id + " completed with status " + model.ModelStatus);

                // Get model status.
                if (model.ModelStatus != ModelStatus.Completed)
                {
                    Console.WriteLine("Model training aborted.");
                    return;
                }
            }

            // Scoring Example 1: Let's get some recommendations for item with ID 6480764
            string itemId = "DHF-00881";
            Console.WriteLine("\n\nRecommendations for Item " + itemId + ":");
            var results = models.GetItemRecommendations(modelId.Value, "6480764");
            foreach (var result in results)
            {
                Console.WriteLine("\t Recommendation Id: " + result.RecommendedItemId + " Score:" + result.Score);
            }


            // Scoring Example 2: Let's get some recommendations from the default model.
            Console.WriteLine("\n\nRecommendations for Item from default model " + itemId + ":");
            // First, ensure this model is the default model.
            models.SetDefaultModel(modelId.Value);
            // Now that it is the default model, we can request recommendations using the default model
            results = models.GetItemRecommendationsFromDefaultModel("6480764");
            foreach (var result in results)
            {
                Console.WriteLine("\t Recommendation Id: " + result.RecommendedItemId + " Score:" + result.Score);
            }

            // Scoring Example 3: Let's get personalized recommendations.
            // Assume a customer has done two recent transactions -- she purchased item  DHF-01550 
            // on February 1st 2017, and purchased item DHF-01333 the previous day.
            Console.WriteLine("\n\nPersonalized recommendations for user with 2 transactions:");
            var events = new List<UsageEvent>
                {
                    new UsageEvent
                    {
                        ItemId = "DHF-01550",
                        EventType = EventType.Purchase,
                        Timestamp = new DateTime(2017,2,1)
                    },
                    new UsageEvent
                    {
                        ItemId = "DHF-01333",
                        EventType = EventType.Purchase,
                        Timestamp = new DateTime(2017,1,31)
                    }
                };
            results = models.GetPersonalizedRecommendationsFromDefaultModel(events);
            foreach (var result in results)
            {
                Console.WriteLine("\t Recommendation Id: " + result.RecommendedItemId + " Score:" + result.Score);
            }

            Console.WriteLine("\nPress any key to close application.");
            Console.ReadKey();
        }

        /// <summary>
        /// Copies sample data to blob storage. 
        /// This method is here to make it easier for you to test your service.
        /// </summary>
        /// <param name="connectionString">The connection string to the container.</param>
        /// <param name="containerName">The name of the container that was created for you at deployment time.</param>
        /// <param name="catalogFileRelativeLocation">The relative path to the catalog file</param>
        /// <param name="usageFolderRelativeLocation">The relative path to the usage files folder.</param>
        static void CopySampleFilesToBlobStorage(string connectionString, 
                                                 string containerName, 
                                                 string catalogFileRelativeLocation, 
                                                 string usageFolderRelativeLocation)
        {
            // These are the names of the files that ship with the sample in the Resources
            string catalogFileName = "demoCatalog.csv";
            string usageFileName = "demoUsage.csv";

            // Copy input file from resources directory to blob storage
            var sourceStorageAccount = CloudStorageAccount.Parse(connectionString);
            BlobHelper bh = new BlobHelper(sourceStorageAccount, containerName);
            var resourcesDir = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "Resources");

            bh.PutBlockBlob(containerName, catalogFileRelativeLocation, File.ReadAllText(Path.Combine(resourcesDir, catalogFileName)));

            bh.PutBlockBlob(containerName, usageFolderRelativeLocation+"\\"+usageFileName, File.ReadAllText(Path.Combine(resourcesDir, usageFileName)));
        }
    }
}
